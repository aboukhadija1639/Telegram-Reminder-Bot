#!/usr/bin/env node

/**
 * Setup script for Telegram Reminder Bot
 * This script helps configure the bot for first-time use
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setup() {
  console.log('🤖 Telegram Reminder Bot Setup\n');
  console.log('This script will help you configure your bot for first-time use.\n');

  // Check if .env already exists
  const envPath = path.join(__dirname, '../.env');
  if (fs.existsSync(envPath)) {
    const overwrite = await question('⚠️  .env file already exists. Overwrite? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Setup cancelled.');
      process.exit(0);
    }
  }

  // Collect configuration
  const config = {};

  console.log('\n📝 Bot Configuration');
  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');

  config.BOT_TOKEN = await question('🔑 Enter your Telegram Bot Token: ');
  if (!config.BOT_TOKEN || !config.BOT_TOKEN.includes(':')) {
    console.log('❌ Invalid bot token format!');
    process.exit(1);
  }

  config.MONGODB_URI = await question('🗄️  Enter MongoDB URI (default: mongodb://localhost:27017/telegram_reminder_bot): ') 
    || 'mongodb://localhost:27017/telegram_reminder_bot';

  const adminIds = await question('👑 Enter admin Telegram IDs (comma-separated): ');
  config.ADMIN_IDS = adminIds || '';

  config.DEFAULT_LANGUAGE = await question('🌐 Default language (ar/en, default: ar): ') || 'ar';
  config.TIMEZONE = await question('🕒 Default timezone (default: Asia/Damascus): ') || 'Asia/Damascus';
  config.PORT = await question('🌐 Server port (default: 3000): ') || '3000';

  console.log('\n⚙️  Advanced Configuration');
  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');

  config.NODE_ENV = await question('🏗️  Environment (development/production, default: development): ') || 'development';
  config.LOG_LEVEL = await question('📝 Log level (debug/info/warn/error, default: info): ') || 'info';
  config.WEBHOOK_URL = await question('🔗 Webhook URL (optional, for production): ') || '';

  // Generate .env file
  let envContent = '# Telegram Reminder Bot Configuration\n';
  envContent += '# Generated by setup script\n\n';

  envContent += '# Bot Configuration\n';
  envContent += `BOT_TOKEN=${config.BOT_TOKEN}\n`;
  if (config.WEBHOOK_URL) {
    envContent += `WEBHOOK_URL=${config.WEBHOOK_URL}\n`;
  }
  envContent += '\n';

  envContent += '# Database Configuration\n';
  envContent += `MONGODB_URI=${config.MONGODB_URI}\n`;
  envContent += 'REDIS_URL=redis://localhost:6379\n\n';

  envContent += '# Admin Configuration\n';
  envContent += `ADMIN_IDS=${config.ADMIN_IDS}\n\n`;

  envContent += '# Application Configuration\n';
  envContent += `NODE_ENV=${config.NODE_ENV}\n`;
  envContent += `PORT=${config.PORT}\n`;
  envContent += `DEFAULT_LANGUAGE=${config.DEFAULT_LANGUAGE}\n`;
  envContent += `TIMEZONE=${config.TIMEZONE}\n`;
  envContent += `LOG_LEVEL=${config.LOG_LEVEL}\n\n`;

  envContent += '# Rate Limiting\n';
  envContent += 'RATE_LIMIT_WINDOW=60000\n';
  envContent += 'RATE_LIMIT_MAX=30\n\n';

  envContent += '# Security\n';
  envContent += 'SESSION_SECRET=your_secure_session_secret\n';
  envContent += 'JWT_SECRET=your_jwt_secret\n\n';

  envContent += '# External Services\n';
  envContent += 'BACKUP_STORAGE_URL=your_backup_storage_url\n';

  // Write .env file
  fs.writeFileSync(envPath, envContent);

  console.log('\n✅ Configuration Complete!');
  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
  console.log(`📄 Created .env file at: ${envPath}`);
  console.log('\n🚀 Next Steps:');
  console.log('1. Install dependencies: npm install');
  console.log('2. Start development server: npm run dev');
  console.log('3. Or start production server: npm start');
  console.log('\n📚 For more information, check the README.md file.');

  rl.close();
}

// Handle errors
process.on('SIGINT', () => {
  console.log('\n\n❌ Setup cancelled by user.');
  process.exit(0);
});

process.on('uncaughtException', (error) => {
  console.error('\n❌ Setup failed:', error.message);
  process.exit(1);
});

// Run setup
setup().catch((error) => {
  console.error('❌ Setup failed:', error.message);
  process.exit(1);
});